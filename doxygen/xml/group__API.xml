<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__API" kind="group">
    <compoundname>API</compoundname>
    <title>hidapi API</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__API_1ga142ffc1b0b7a7fa412d3862b2a17164b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> <ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>int HID_API_EXPORT HID_API_CALL hid_init</definition>
        <argsstring>(void)</argsstring>
        <name>hid_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize the HIDAPI library. </para>        </briefdescription>
        <detaileddescription>
<para>This function initializes the HIDAPI library. Calling it is not strictly necessary, as it will be called automatically by <ref refid="group__API_1ga135931e04d48078a9fb7aebf663676f9" kindref="member">hid_enumerate()</ref> and any of the hid_open_*() functions if it is needed. This function should be called at the beginning of execution however, if there is a chance of HIDAPI handles being opened by different threads simultaneously.</para><para><simplesect kind="return"><para>This function returns 0 on success and -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gacf5da9ce37132eba69fc259f17f13023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> <ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>int HID_API_EXPORT HID_API_CALL hid_exit</definition>
        <argsstring>(void)</argsstring>
        <name>hid_exit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Finalize the HIDAPI library. </para>        </briefdescription>
        <detaileddescription>
<para>This function frees all of the static data associated with HIDAPI. It should be called at the end of execution to avoid memory leaks.</para><para><simplesect kind="return"><para>This function returns 0 on success and -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga135931e04d48078a9fb7aebf663676f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structhid__device__info" kindref="compound">hid_device_info</ref> <ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> *<ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>struct hid_device_info HID_API_EXPORT* HID_API_CALL hid_enumerate</definition>
        <argsstring>(unsigned short vendor_id, unsigned short product_id)</argsstring>
        <name>hid_enumerate</name>
        <param>
          <type>unsigned short</type>
          <declname>vendor_id</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>product_id</declname>
        </param>
        <briefdescription>
<para>Enumerate the HID Devices. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a linked list of all the HID devices attached to the system which match vendor_id and product_id. If <computeroutput>vendor_id</computeroutput> is set to 0 then any vendor matches. If <computeroutput>product_id</computeroutput> is set to 0 then any product matches. If <computeroutput>vendor_id</computeroutput> and <computeroutput>product_id</computeroutput> are both set to 0, then all HID devices will be returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vendor_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The Vendor ID (VID) of the types of device to open. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>product_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The Product ID (PID) of the types of device to open.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns a pointer to a linked list of type struct <ref refid="structhid__device__info" kindref="compound">hid_device_info</ref>, containing information about the HID devices attached to the system, or NULL in the case of failure. Free this linked list by calling <ref refid="group__API_1gafc2d2adf71db3784b783b9a554527aa4" kindref="member">hid_free_enumeration()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gafc2d2adf71db3784b783b9a554527aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void <ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> <ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>void HID_API_EXPORT HID_API_CALL hid_free_enumeration</definition>
        <argsstring>(struct hid_device_info *devs)</argsstring>
        <name>hid_free_enumeration</name>
        <param>
          <type>struct <ref refid="structhid__device__info" kindref="compound">hid_device_info</ref> *</type>
          <declname>devs</declname>
        </param>
        <briefdescription>
<para>Free an enumeration Linked List. </para>        </briefdescription>
        <detaileddescription>
<para>This function frees a linked list created by <ref refid="group__API_1ga135931e04d48078a9fb7aebf663676f9" kindref="member">hid_enumerate()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devs</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a list of struct_device returned from <ref refid="group__API_1ga135931e04d48078a9fb7aebf663676f9" kindref="member">hid_enumerate()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gae6910ed9f01c4a99d25539b16800e90c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> <ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *<ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>HID_API_EXPORT hid_device* HID_API_CALL hid_open</definition>
        <argsstring>(unsigned short vendor_id, unsigned short product_id, const wchar_t *serial_number)</argsstring>
        <name>hid_open</name>
        <param>
          <type>unsigned short</type>
          <declname>vendor_id</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>product_id</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>serial_number</declname>
        </param>
        <briefdescription>
<para>Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally a serial number. </para>        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>serial_number</computeroutput> is NULL, the first device with the specified VID and PID is opened.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vendor_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The Vendor ID (VID) of the device to open. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>product_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The Product ID (PID) of the device to open. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The Serial Number of the device to open (Optionally NULL).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns a pointer to a <ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> object on success or NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga1e87518670f88540c920dc451df608ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> <ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *<ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>HID_API_EXPORT hid_device* HID_API_CALL hid_open_path</definition>
        <argsstring>(const char *path)</argsstring>
        <name>hid_open_path</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open a HID device by its path name. </para>        </briefdescription>
        <detaileddescription>
<para>The path name be determined by calling <ref refid="group__API_1ga135931e04d48078a9fb7aebf663676f9" kindref="member">hid_enumerate()</ref>, or a platform-specific path name can be used (eg: /dev/hidraw0 on Linux).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path name of the device to open</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns a pointer to a <ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> object on success or NULL on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gaa691d2c469b9654128196bf7ef8edd9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> <ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>int HID_API_EXPORT HID_API_CALL hid_write</definition>
        <argsstring>(hid_device *dev, const unsigned char *data, size_t length)</argsstring>
        <name>hid_write</name>
        <param>
          <type><ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Write an Output report to a HID device. </para>        </briefdescription>
        <detaileddescription>
<para>The first byte of <computeroutput>data</computeroutput>[] must contain the Report ID. For devices which only support a single report, this must be set to 0x0. The remaining bytes contain the report data. Since the Report ID is mandatory, calls to <ref refid="group__API_1gaa691d2c469b9654128196bf7ef8edd9d" kindref="member">hid_write()</ref> will always contain one more byte than the report contains. For example, if a hid report is 16 bytes long, 17 bytes must be passed to <ref refid="group__API_1gaa691d2c469b9654128196bf7ef8edd9d" kindref="member">hid_write()</ref>, the Report ID (or 0x0, for devices with a single report), followed by the report data (16 bytes). In this example, the length passed in would be 17.</para><para><ref refid="group__API_1gaa691d2c469b9654128196bf7ef8edd9d" kindref="member">hid_write()</ref> will send the data on the first OUT endpoint, if one exists. If it does not, it will send the data through the Control Endpoint (Endpoint 0).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="group__API_1gae6910ed9f01c4a99d25539b16800e90c" kindref="member">hid_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send, including the report number as the first byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length in bytes of the data to send.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns the actual number of bytes written and -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gaa5c9ed5aa290688ffac03343989ad75a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> <ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>int HID_API_EXPORT HID_API_CALL hid_read_timeout</definition>
        <argsstring>(hid_device *dev, unsigned char *data, size_t length, int milliseconds)</argsstring>
        <name>hid_read_timeout</name>
        <param>
          <type><ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
<para>Read an Input report from a HID device with timeout. </para>        </briefdescription>
        <detaileddescription>
<para>Input reports are returned to the host through the INTERRUPT IN endpoint. The first byte will contain the Report number if the device uses numbered reports.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="group__API_1gae6910ed9f01c4a99d25539b16800e90c" kindref="member">hid_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to put the read data into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read. For devices with multiple reports, make sure to read an extra byte for the report number. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in milliseconds or -1 for blocking wait.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns the actual number of bytes read and -1 on error. If no packet was available to be read within the timeout period, this function returns 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga2224269e8cd7c789f9fd4864a73f8c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> <ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>int HID_API_EXPORT HID_API_CALL hid_read</definition>
        <argsstring>(hid_device *dev, unsigned char *data, size_t length)</argsstring>
        <name>hid_read</name>
        <param>
          <type><ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Read an Input report from a HID device. </para>        </briefdescription>
        <detaileddescription>
<para>Input reports are returned to the host through the INTERRUPT IN endpoint. The first byte will contain the Report number if the device uses numbered reports.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="group__API_1gae6910ed9f01c4a99d25539b16800e90c" kindref="member">hid_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to put the read data into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read. For devices with multiple reports, make sure to read an extra byte for the report number.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns the actual number of bytes read and -1 on error. If no packet was available to be read and the handle is in non-blocking mode, this function returns 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga0e9af0d8ed72f5610e9297c90b08e242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> <ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>int HID_API_EXPORT HID_API_CALL hid_set_nonblocking</definition>
        <argsstring>(hid_device *dev, int nonblock)</argsstring>
        <name>hid_set_nonblocking</name>
        <param>
          <type><ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nonblock</declname>
        </param>
        <briefdescription>
<para>Set the device handle to be non-blocking. </para>        </briefdescription>
        <detaileddescription>
<para>In non-blocking mode calls to <ref refid="group__API_1ga2224269e8cd7c789f9fd4864a73f8c95" kindref="member">hid_read()</ref> will return immediately with a value of 0 if there is no data to be read. In blocking mode, <ref refid="group__API_1ga2224269e8cd7c789f9fd4864a73f8c95" kindref="member">hid_read()</ref> will wait (block) until there is data to read before returning.</para><para>Nonblocking can be turned on and off at any time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="group__API_1gae6910ed9f01c4a99d25539b16800e90c" kindref="member">hid_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonblock</parametername>
</parameternamelist>
<parameterdescription>
<para>enable or not the nonblocking reads<itemizedlist>
<listitem><para>1 to enable nonblocking</para></listitem><listitem><para>0 to disable nonblocking.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns 0 on success and -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gae99a9ddbb5d9b03fddf40fb4a492cbec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> <ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>int HID_API_EXPORT HID_API_CALL hid_send_feature_report</definition>
        <argsstring>(hid_device *dev, const unsigned char *data, size_t length)</argsstring>
        <name>hid_send_feature_report</name>
        <param>
          <type><ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Send a Feature report to the device. </para>        </briefdescription>
        <detaileddescription>
<para>Feature reports are sent over the Control endpoint as a Set_Report transfer. The first byte of <computeroutput>data</computeroutput>[] must contain the Report ID. For devices which only support a single report, this must be set to 0x0. The remaining bytes contain the report data. Since the Report ID is mandatory, calls to <ref refid="group__API_1gae99a9ddbb5d9b03fddf40fb4a492cbec" kindref="member">hid_send_feature_report()</ref> will always contain one more byte than the report contains. For example, if a hid report is 16 bytes long, 17 bytes must be passed to <ref refid="group__API_1gae99a9ddbb5d9b03fddf40fb4a492cbec" kindref="member">hid_send_feature_report()</ref>: the Report ID (or 0x0, for devices which do not use numbered reports), followed by the report data (16 bytes). In this example, the length passed in would be 17.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="group__API_1gae6910ed9f01c4a99d25539b16800e90c" kindref="member">hid_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send, including the report number as the first byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length in bytes of the data to send, including the report number.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns the actual number of bytes written and -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gaa537a4b3c49d638c6ec9dedc08c44601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> <ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>int HID_API_EXPORT HID_API_CALL hid_get_feature_report</definition>
        <argsstring>(hid_device *dev, unsigned char *data, size_t length)</argsstring>
        <name>hid_get_feature_report</name>
        <param>
          <type><ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Get a feature report from a HID device. </para>        </briefdescription>
        <detaileddescription>
<para>Set the first byte of <computeroutput>data</computeroutput>[] to the Report ID of the report to be read. Make sure to allow space for this extra byte in <computeroutput>data</computeroutput>[]. Upon return, the first byte will still contain the Report ID, and the report data will start in data[1].</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="group__API_1gae6910ed9f01c4a99d25539b16800e90c" kindref="member">hid_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to put the read data into, including the Report ID. Set the first byte of <computeroutput>data</computeroutput>[] to the Report ID of the report to be read, or set it to zero if your device does not use numbered reports. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read, including an extra byte for the report ID. The buffer can be longer than the actual report.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns the number of bytes read plus one for the report ID (which is still in the first byte), or -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga8d478a5986439ffb838fb1f1ba6ba5ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void <ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> <ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>void HID_API_EXPORT HID_API_CALL hid_close</definition>
        <argsstring>(hid_device *dev)</argsstring>
        <name>hid_close</name>
        <param>
          <type><ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Close a HID device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="group__API_1gae6910ed9f01c4a99d25539b16800e90c" kindref="member">hid_open()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga702f45b42d85599eedd602c05661fde5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="hidapi_8h_1a70c49eda5025c1bc455af77da19ca312" kindref="member">HID_API_EXPORT_CALL</ref></type>
        <definition>int HID_API_EXPORT_CALL hid_get_manufacturer_string</definition>
        <argsstring>(hid_device *dev, wchar_t *string, size_t maxlen)</argsstring>
        <name>hid_get_manufacturer_string</name>
        <param>
          <type><ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxlen</declname>
        </param>
        <briefdescription>
<para>Get The Manufacturer String from a HID device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="group__API_1gae6910ed9f01c4a99d25539b16800e90c" kindref="member">hid_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string buffer to put the data into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer in multiples of wchar_t.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns 0 on success and -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="340" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga648feb765c5e0da3e821ee84aeab9d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="hidapi_8h_1a70c49eda5025c1bc455af77da19ca312" kindref="member">HID_API_EXPORT_CALL</ref></type>
        <definition>int HID_API_EXPORT_CALL hid_get_product_string</definition>
        <argsstring>(hid_device *dev, wchar_t *string, size_t maxlen)</argsstring>
        <name>hid_get_product_string</name>
        <param>
          <type><ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxlen</declname>
        </param>
        <briefdescription>
<para>Get The Product String from a HID device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="group__API_1gae6910ed9f01c4a99d25539b16800e90c" kindref="member">hid_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string buffer to put the data into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer in multiples of wchar_t.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns 0 on success and -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga3442db3ece59fe248b0625a4c8fca617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="hidapi_8h_1a70c49eda5025c1bc455af77da19ca312" kindref="member">HID_API_EXPORT_CALL</ref></type>
        <definition>int HID_API_EXPORT_CALL hid_get_serial_number_string</definition>
        <argsstring>(hid_device *dev, wchar_t *string, size_t maxlen)</argsstring>
        <name>hid_get_serial_number_string</name>
        <param>
          <type><ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxlen</declname>
        </param>
        <briefdescription>
<para>Get The Serial Number String from a HID device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="group__API_1gae6910ed9f01c4a99d25539b16800e90c" kindref="member">hid_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string buffer to put the data into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer in multiples of wchar_t.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns 0 on success and -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga18546669554746d0f292ca5e23372e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int <ref refid="hidapi_8h_1a70c49eda5025c1bc455af77da19ca312" kindref="member">HID_API_EXPORT_CALL</ref></type>
        <definition>int HID_API_EXPORT_CALL hid_get_indexed_string</definition>
        <argsstring>(hid_device *dev, int string_index, wchar_t *string, size_t maxlen)</argsstring>
        <name>hid_get_indexed_string</name>
        <param>
          <type><ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>string_index</declname>
        </param>
        <param>
          <type>wchar_t *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxlen</declname>
        </param>
        <briefdescription>
<para>Get a string from a HID device, based on its string index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="group__API_1gae6910ed9f01c4a99d25539b16800e90c" kindref="member">hid_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string_index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the string to get. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>A wide string buffer to put the data into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the buffer in multiples of wchar_t.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns 0 on success and -1 on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gaac4feaa92f29edfb53d498ce3953c694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="hidapi_8h_1aa60150016800ccb88fdf140e8553ae13" kindref="member">HID_API_EXPORT</ref> const wchar_t *<ref refid="hidapi_8h_1af140a25716604e86096670a505a58ee0" kindref="member">HID_API_CALL</ref></type>
        <definition>HID_API_EXPORT const wchar_t* HID_API_CALL hid_error</definition>
        <argsstring>(hid_device *dev)</argsstring>
        <name>hid_error</name>
        <param>
          <type><ref refid="hidapi_8h_1aa6da74d5686d198dd3e5440e60088fcc" kindref="member">hid_device</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Get a string describing the last error which occurred. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>A device handle returned from <ref refid="group__API_1gae6910ed9f01c4a99d25539b16800e90c" kindref="member">hid_open()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns a string containing the last error which occurred or NULL if none has occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/filip/OSS/hidapi/hidapi/hidapi.h" line="388" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
